trigger:
- main  # This triggers the pipeline for changes to the 'main' branch. Change if needed.

pool:
  vmImage: 'windows-latest'  # Using a Windows-based build agent

steps:
# Step 1: Install .NET SDK 8
- task: UseDotNet@2
  inputs:
    packageType: 'sdk'
    version: '8.x'  # Updated to .NET 8 SDK
    installationPath: $(Agent.ToolsDirectory)/dotnet

# Step 2: Restore NuGet Packages for the C# Project and Test Project
- task: DotNetCoreCLI@2
  inputs:
    command: 'restore'
    projects: |
      ind-tableau-alert-dashboard-risk-queue/ind-tableau-alert-dashboard-risk-queue.csproj
      ind-tableau-alert-dashboard-risk-queue-unittest/ind-tableau-alert-dashboard-risk-queue-unittest.csproj

# Step 3: Build the Projects
- task: DotNetCoreCLI@2
  inputs:
    command: 'build'
    projects: |
      ind-tableau-alert-dashboard-risk-queue/ind-tableau-alert-dashboard-risk-queue.csproj
      ind-tableau-alert-dashboard-risk-queue-unittest/ind-tableau-alert-dashboard-risk-queue-unittest.csproj

# Step 4: Run Tests and Collect Code Coverage (only for the unit test project)
- task: DotNetCoreCLI@2
  inputs:
    command: 'test'
    projects: '**/ind-tableau-alert-dashboard-risk-queue-unittest/ind-tableau-alert-dashboard-risk-queue-unittest.csproj'
    arguments: '--collect:"Code Coverage" -- DataCollectionRunSettings.DataCollectors.DataCollector.Configuration.Include="[**/ind-tableau-alert-dashboard-risk-queue.dll]" --exclude "[**/ind-tableau-alert-dashboard-risk-queue-unittest.dll]" --exclude "[**/StackExchange.Redis.dll]"'

# Step 5: Publish Code Coverage Results using v2
- task: PublishCodeCoverageResults@2
  inputs:
    codeCoverageTool: 'VSTest'  # Use VSTest for .coverage files
    summaryFileLocation: 'D:\a\_temp\*.coverage'  # Path to the .coverage file generated by VSTest
    reportDirectory: '$(Build.SourcesDirectory)/TestResults/*/codecoverage'  # Optional detailed report location
    failIfCoverageFails: true  # Optional: Fail the build if code coverage fails
