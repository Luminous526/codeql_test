trigger:
- main  # Triggers on changes to the main branch

pool:
  vmImage: 'windows-latest'

steps:
# Step 1: Install .NET SDK 8
- task: UseDotNet@2
  inputs:
    packageType: 'sdk'
    version: '8.x'  # .NET 8 SDK
    installationPath: $(Agent.ToolsDirectory)/dotnet

# Step 2: Install ReportGenerator tool
- task: DotNetCoreCLI@2
  displayName: 'Install ReportGenerator'
  inputs:
    command: custom
    custom: tool
    arguments: 'install --global dotnet-reportgenerator-globaltool'

# Step 3: Restore NuGet Packages for the Project
- task: DotNetCoreCLI@2
  inputs:
    command: 'restore'
    projects: |
      ind-tableau-alert-dashboard-risk-queue/ind-tableau-alert-dashboard-risk-queue.csproj
      ind-tableau-alert-dashboard-risk-queue-unittest/ind-tableau-alert-dashboard-risk-queue-unittest.csproj

# Step 4: Build the Projects
- task: DotNetCoreCLI@2
  inputs:
    command: 'build'
    projects: |
      ind-tableau-alert-dashboard-risk-queue/ind-tableau-alert-dashboard-risk-queue.csproj
      ind-tableau-alert-dashboard-risk-queue-unittest/ind-tableau-alert-dashboard-risk-queue-unittest.csproj

# Step 5: Run Unit Tests and Collect Code Coverage
- task: DotNetCoreCLI@2
  displayName: 'Run unit tests'
  inputs:
    command: 'test'
    arguments: '--no-build --configuration $(buildConfiguration) /p:CollectCoverage=true /p:CoverletOutputFormat=cobertura /p:CoverletOutput=$(Agent.TempDirectory)/TestResults/Coverage/'
    publishTestResults: true
    projects: '**/*.Tests.csproj'

# Step 6: Generate HTML Coverage Report
- script: |
    reportgenerator -reports:$(Agent.TempDirectory)/**/coverage.cobertura.xml -targetdir:$(Agent.TempDirectory)/CodeCoverage -reporttypes:HtmlInline_AzurePipelines
  displayName: 'Create code coverage report'

# Step 7: Publish Code Coverage Results
- task: PublishCodeCoverageResults@1
  displayName: 'Publish code coverage report'
  inputs:
    codeCoverageTool: 'cobertura'
    summaryFileLocation: '$(Agent.TempDirectory)/**/coverage.cobertura.xml'
